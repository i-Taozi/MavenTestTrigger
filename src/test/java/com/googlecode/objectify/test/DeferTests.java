/*
 */

package com.googlecode.objectify.test;

import com.googlecode.objectify.Key;
import com.googlecode.objectify.ObjectifyService;
import com.googlecode.objectify.annotation.Entity;
import com.googlecode.objectify.annotation.Id;
import com.googlecode.objectify.annotation.OnSave;
import com.googlecode.objectify.test.entity.Trivial;
import com.googlecode.objectify.test.util.TestBase;
import com.googlecode.objectify.util.Closeable;
import lombok.Data;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import static com.google.common.truth.Truth.assertThat;
import static com.googlecode.objectify.ObjectifyService.factory;
import static com.googlecode.objectify.ObjectifyService.ofy;

/**
 * Tests of defer()
 *
 * @author Jeff Schnitzer <jeff@infohazard.org>
 */
class DeferTests extends TestBase {

	@BeforeEach
	void setUp() throws Exception {
		factory().register(Trivial.class);
	}

	/** */
	@Test
	void deferredSaveWithAutogeneratedId() throws Exception {
		final Trivial triv = new Trivial("foo", 5);

		try (final Closeable root = ObjectifyService.begin()) {
			ofy().defer().save().entity(triv);
		}

		assertThat(triv.getId()).isNotNull();
	}

	/** */
	@Test
	void deferredSaveAndDeleteWithPrimitiveIdsArray() throws Exception {
		final Trivial triv1 = new Trivial("foo", 5);
		final Trivial triv2 = new Trivial("foo", 5);
		triv1.setId(12345L);
		triv2.setId(12346L);

		try (final Closeable root = ObjectifyService.begin()) {
			ofy().defer().save().entities(triv1, triv2);
			assertThat(ofy().load().entity(triv1).now()).isEqualTo(triv1);
			assertThat(ofy().load().entity(triv2).now()).isEqualTo(triv2);

			ofy().defer().delete().type(Trivial.class).ids(12345L, 12346L);
			assertThat(ofy().load().entity(triv1).now()).isNull();
			assertThat(ofy().load().entity(triv2).now()).isNull();
		}
	}

	/** */
	@Test
	void deferredSaveAndDeleteProcessedAtEndOfRequest() throws Exception {

		final Trivial triv = new Trivial(123L, "foo", 5);

		try (final Closeable root = ObjectifyService.begin()) {
			ofy().defer().save().entity(triv);

			// Can load out of session
			assertThat(ofy().load().entity(triv).now()).isEqualTo(triv);

			// But not the datastore
			final com.google.cloud.datastore.Entity indatastore = datastore().get(Key.create(triv).getRaw());
			assertThat(indatastore).isNull();
		}

		try (final Closeable root = ObjectifyService.begin()) {
			final Trivial loaded = ofy().load().entity(triv).now();
			assertThat(loaded).isEqualTo(triv);
		}

		try (final Closeable root = ObjectifyService.begin()) {
			ofy().defer().delete().entity(triv);

			// Deleted in session
			assertThat(ofy().load().entity(triv).now()).isNull();

			// But not datastore
			assertThat(datastore().get(Key.create(triv).getRaw())).isNotNull();
		}

		try (final Closeable root = ObjectifyService.begin()) {
			final Trivial loaded = ofy().load().entity(triv).now();
			assertThat(loaded).isNull();
		}
	}

	/** */
	@Test
	void deferredSaveAndDeleteProcessedAtEndOfTransaction() throws Exception {

		final Trivial triv = new Trivial(123L, "foo", 5);

		try (final Closeable root = ObjectifyService.begin()) {

			ofy().transact(() -> {
				ofy().defer().save().entity(triv);

				// Can load out of session
				assertThat(ofy().load().entity(triv).now()).isEqualTo(triv);

				// But not datastore
				assertThat(datastore().get(Key.create(triv).getRaw())).isNull();
			});

			{
				final Trivial loaded = ofy().load().entity(triv).now();
				assertThat(loaded).isEqualTo(triv);
			}

			ofy().transact(() -> {
				ofy().defer().delete().entity(triv);

				// Deleted in session
				assertThat(ofy().load().entity(triv).now()).isNull();

				// But not datastore
				assertThat(datastore().get(Key.create(triv).getRaw())).isNotNull();
			});

			{
				final Trivial loaded = ofy().load().entity(triv).now();
				assertThat(loaded).isNull();
			}
		}
	}

	@Entity
	@Data
	private static class HasOnSave {
		@Id
		private Long id;
		private String data;

		@OnSave
		void changeData() {
			data = "onsaved";
		}
	}

	/** */
	@Test
	void deferredSaveTriggersOnSaveMethods() throws Exception {
		factory().register(HasOnSave.class);
		final HasOnSave hos = new HasOnSave();

		try (final Closeable root = ObjectifyService.begin()) {
			ofy().defer().save().entity(hos);
		}

		assertThat(hos.getData()).isEqualTo("onsaved");
	}
}