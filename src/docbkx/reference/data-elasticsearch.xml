<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
"http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">
<chapter id="elasticsearch.repositories">
	<title>Elasticsearch Repositories</title>
	<abstract>
		<para>This chapter includes details of the Elasticsearch repository
			implementation.
		</para>
	</abstract>
	<section id="elasticsearch.introduction">
		<title>Introduction</title>

		<section id="elasticsearch.namespace">
			<title>Spring Namespace</title>

			<para>
				The Spring Data Elasticsearch module contains a custom namespace allowing
				definition of repository beans as well as elements for instantiating
				a
				<classname>ElasticsearchServer</classname>
				.
			</para>

			<para>
				Using the
				<code>repositories</code>
				element looks up Spring Data repositories as described in
				<xref linkend="repositories.create-instances" />
				.
			</para>

			<example>
				<title>Setting up Elasticsearch repositories using Namespace</title>
<programlisting language="xml">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;beans xmlns="http://www.springframework.org/schema/beans"
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xmlns:elasticsearch="http://www.springframework.org/schema/data/elasticsearch"
xsi:schemaLocation="http://www.springframework.org/schema/beans
http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
http://www.springframework.org/schema/data/elasticsearch
http://www.springframework.org/schema/data/elasticsearch/spring-elasticsearch-1.0.xsd"&gt;

&lt;elasticsearch:repositories base-package="com.acme.repositories" /&gt;
&lt;/beans&gt;</programlisting>
			</example>

			<para>
				Using the
				<code>Transport Client</code>
				or
				<code>Node Client</code>
				element registers an instance of
				<code>Elasticsearch Server</code>
				in the context.

				<example>
					<title>Transport Client using Namespace</title>
<programlisting language="xml">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;beans xmlns="http://www.springframework.org/schema/beans"
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xmlns:elasticsearch="http://www.springframework.org/schema/data/elasticsearch"
xsi:schemaLocation="http://www.springframework.org/schema/beans
http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
http://www.springframework.org/schema/data/elasticsearch
http://www.springframework.org/schema/data/elasticsearch/spring-elasticsearch-1.0.xsd"&gt;

&lt;elasticsearch:transport-client id="client" cluster-nodes="localhost:9300,someip:9300" /&gt;
&lt;/beans&gt; </programlisting>
				</example>

				<example>
					<title>Node Client using Namespace</title>
<programlisting language="xml">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;beans xmlns="http://www.springframework.org/schema/beans"
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xmlns:elasticsearch="http://www.springframework.org/schema/data/elasticsearch"
xsi:schemaLocation="http://www.springframework.org/schema/beans
http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
http://www.springframework.org/schema/data/elasticsearch
http://www.springframework.org/schema/data/elasticsearch/spring-elasticsearch-1.0.xsd"&gt;

&lt;elasticsearch:node-client id="client" local="true"" /&gt;
&lt;/beans&gt; </programlisting>
				</example>
			</para>
		</section>
		<section id="elasticsearch.annotation">
			<title>Annotation based configuration</title>
			<para>The Spring Data Elasticsearch repositories support cannot only be
				activated through an XML namespace but also using an annotation
				through JavaConfig.
			</para>
			<example>
				<title>Spring Data Elasticsearch repositories using JavaConfig</title>
<programlisting language="java">
@Configuration
@EnableElasticsearchRepositories(basePackages = "org/springframework/data/elasticsearch/repositories")
static class Config {

@Bean
public ElasticsearchOperations elasticsearchTemplate() {
return new ElasticsearchTemplate(nodeBuilder().local(true).node().client());
 }
}</programlisting>
				<para>
					The configuration above sets up an
					<classname>Embedded Elasticsearch Server</classname>
					which is used by the
					<classname>ElasticsearchTemplate</classname>
					. Spring Data Elasticsearch Repositories are activated using the
					<interfacename>@EnableElasticsearchRepositories</interfacename>
					annotation, which
					essentially carries the same attributes as the XML
					namespace does. If no
					base package is configured, it will use the
					one
					the configuration class
					resides in.
				</para>
			</example>
		</section>
		<section id="elasticsearch.cdi">
			<title>Elasticsearch Repositores using CDI</title>
			<para>The Spring Data Elasticsearch repositories can also be set up using CDI
				functionality.
			</para>
			<example>
				<title>Spring Data Elasticsearch repositories using JavaConfig</title>
<programlisting language="java">class ElasticsearchTemplateProducer {

@Produces
@ApplicationScoped
public ElasticsearchOperations createElasticsearchTemplate() {
    return new ElasticsearchTemplate(nodeBuilder().local(true).node().client());
  }
}

class ProductService {

private ProductRepository repository;

public Page&lt;Product&gt; findAvailableBookByName(String name, Pageable pageable) {
   return repository.findByAvailableTrueAndNameStartingWith(name, pageable);
}

@Inject
public void setRepository(ProductRepository repository) {
   this.repository = repository;
 }
}</programlisting>
			</example>
		</section>
	</section>
	<section id="elasticsearch.query-methods">
		<title>Query methods</title>
		<section id="elasticsearch.query-methods.finders">
			<title>Query lookup strategies</title>
			<para>
				The Elasticsearch module supports all basic query building feature as String,Abstract,Criteria or
				have
				it being derived from the method name.
			</para>

			<simplesect>
				<title>Declared queries</title>
				<para>
					Deriving the query from the method name is not always sufficient
					and/or may result in unreadable method names. In this case one
					might make either use of
					<interfacename>@Query</interfacename>
					annotation (see
					<xref linkend="elasticsearch.query-methods.at-query" />
					).
				</para>
			</simplesect>
		</section>

		<section id="elasticsearch.query-methods.criterions">
			<title>Query creation</title>

			<para>
				Generally the query creation mechanism for Elasticsearch works as described
				in
				<xref linkend="repositories.query-methods" />
				. Here's a short example
				of what a Elasticsearch query method translates into:
				<example>
					<title>Query creation from method names</title>
					<programlisting language="java">public interface BookRepository extends Repository&lt;Book, String&gt; {
  List&lt;Book&gt; findByNameAndPrice(String name, Integer price);
}</programlisting>
					<para>
						The method name above will be translated into the following
                        Elasticsearch json query
					</para>
					<programlisting>
                        { "bool" :
                        { "must" :
                        [
                        { "field" : {"name" : "?"} },
                        { "field" : {"price" : "?"} }
                        ] } }</programlisting>
				</example>
			</para>
			<para>
				A list of supported keywords for Elasticsearch is shown below.
				<table>
					<title>Supported keywords inside method names</title>
					<tgroup cols="3">
						<colspec colwidth="1*" />
						<colspec colwidth="2*" />
						<colspec colwidth="3*" />
						<thead>
							<row>
								<entry>Keyword</entry>
								<entry>Sample</entry>
								<entry>Elasticsearch Query String</entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry>
									<code>And</code>
								</entry>
								<entry>
									<code>findByNameAndPrice</code>
								</entry>
								<entry>
									<code>{"bool" : {"must" : [ {"field" : {"name" : "?"}}, {"field" : {"price" : "?"}} ]}}</code>
								</entry>
							</row>
							<row>
								<entry>
									<code>Or</code>
								</entry>
								<entry>
									<code>findByNameOrPrice</code>
								</entry>
								<entry>
									<code>{"bool" : {"should" : [ {"field" : {"name" : "?"}}, {"field" : {"price" : "?"}} ]}}</code>
								</entry>
							</row>
							<row>
								<entry>
									<code>Is</code>
								</entry>
								<entry>
									<code>findByName</code>
								</entry>
								<entry>
									<code>{"bool" : {"must" : {"field" : {"name" : "?"}}}}</code>
								</entry>
							</row>
							<row>
								<entry>
									<code>Not</code>
								</entry>
								<entry>
									<code>findByNameNot</code>
								</entry>
								<entry>
									<code>{"bool" : {"must_not" : {"field" : {"name" : "?"}}}}</code>
								</entry>
							</row>
							<row>
								<entry>
									<code>Between</code>
								</entry>
								<entry>
									<code>findByPriceBetween</code>
								</entry>
								<entry>
									<code>{"bool" : {"must" : {"range" : {"price" : {"from" : ?,"to" : ?,"include_lower" : true,"include_upper" : true}}}}}</code>
								</entry>
							</row>
							<row>
								<entry>
									<code>LessThanEqual</code>
								</entry>
								<entry>
									<code>findByPriceLessThan</code>
								</entry>
								<entry>
									<code>{"bool" : {"must" : {"range" : {"price" : {"from" : null,"to" : ?,"include_lower" : true,"include_upper" : true}}}}}</code>
								</entry>
							</row>
							<row>
								<entry>
									<code>GreaterThanEqual</code>
								</entry>
								<entry>
									<code>findByPriceGreaterThan</code>
								</entry>
								<entry>
									<code>{"bool" : {"must" : {"range" : {"price" : {"from" : ?,"to" : null,"include_lower" : true,"include_upper" : true}}}}}</code>
								</entry>
							</row>
							<row>
								<entry>
									<code>Before</code>
								</entry>
								<entry>
									<code>findByPriceBefore</code>
								</entry>
								<entry>
									<code>{"bool" : {"must" : {"range" : {"price" : {"from" : null,"to" : ?,"include_lower" : true,"include_upper" : true}}}}}</code>
								</entry>
							</row>
							<row>
								<entry>
									<code>After</code>
								</entry>
								<entry>
									<code>findByPriceAfter</code>
								</entry>
								<entry>
									<code>{"bool" : {"must" : {"range" : {"price" : {"from" : ?,"to" : null,"include_lower" : true,"include_upper" : true}}}}}</code>
								</entry>
							</row>
							<row>
								<entry>
									<code>Like</code>
								</entry>
								<entry>
									<code>findByNameLike</code>
								</entry>
								<entry>
									<code>{"bool" : {"must" : {"field" : {"name" : {"query" : "?*","analyze_wildcard" : true}}}}}</code>
								</entry>
							</row>
							<row>
								<entry>
									<code>StartingWith</code>
								</entry>
								<entry>
									<code>findByNameStartingWith</code>
								</entry>
								<entry>
									<code>{"bool" : {"must" : {"field" : {"name" : {"query" : "?*","analyze_wildcard" : true}}}}}</code>
								</entry>
							</row>
							<row>
								<entry>
									<code>EndingWith</code>
								</entry>
								<entry>
									<code>findByNameEndingWith</code>
								</entry>
								<entry>
									<code>{"bool" : {"must" : {"field" : {"name" : {"query" : "*?","analyze_wildcard" : true}}}}}</code>
								</entry>
							</row>
							<row>
								<entry>
									<code>Contains/Containing</code>
								</entry>
								<entry>
									<code>findByNameContaining</code>
								</entry>
								<entry>
									<code>{"bool" : {"must" : {"field" : {"name" : {"query" : "*?*","analyze_wildcard" : true}}}}}</code>
								</entry>
							</row>
							<row>
								<entry>
									<code>In</code>
								</entry>
								<entry>
									<code>findByNameIn(Collection&lt;String&gt;names)</code>
								</entry>
								<entry>
									<code>{"bool" : {"must" : {"bool" : {"should" : [ {"field" : {"name" : "?"}}, {"field" : {"name" : "?"}} ]}}}}</code>
								</entry>
							</row>
							<row>
								<entry>
									<code>NotIn</code>
								</entry>
								<entry>
									<code>findByNameNotIn(Collection&lt;String&gt;names)</code>
								</entry>
								<entry>
									<code>{"bool" : {"must_not" : {"bool" : {"should" : {"field" : {"name" : "?"}}}}}}</code>
								</entry>
							</row>
							<row>
								<entry>
									<code>Near</code>
								</entry>
								<entry>
									<code>findByStoreNear</code>
								</entry>
								<entry>
									<code>Not Supported Yet !</code>
								</entry>
							</row>
							<row>
								<entry>
									<code>True</code>
								</entry>
								<entry>
									<code>findByAvailableTrue</code>
								</entry>
								<entry>
									<code>{"bool" : {"must" : {"field" : {"available" : true}}}}</code>
								</entry>
							</row>
							<row>
								<entry>
									<code>False</code>
								</entry>
								<entry>
									<code>findByAvailableFalse</code>
								</entry>
								<entry>
									<code>{"bool" : {"must" : {"field" : {"available" : false}}}}</code>
								</entry>
							</row>
							<row>
								<entry>
									<code>OrderBy</code>
								</entry>
								<entry>
									<code>findByAvailableTrueOrderByNameDesc</code>
								</entry>
								<entry>
									<code>{"sort" : [{ "name" : {"order" : "desc"} }],"bool" : {"must" : {"field" : {"available" : true}}}}</code>
								</entry>
							</row>
						</tbody>
					</tgroup>
				</table>
			</para>
		</section>
		<section id="elasticsearch.query-methods.at-query">
			<title>Using @Query Annotation</title>
			<example>
				<title>
					Declare query at the method using the
					<interfacename>@Query</interfacename>
					annotation.
				</title>

				<programlisting language="java">public interface BookRepository extends ElasticsearchRepository&lt;Book, String&gt; {
  @Query("{"bool" : {"must" : {"field" : {"name" : "?0"}}}}")
  Page&lt;Book&gt; findByName(String name,Pageable pageable);
}</programlisting>
			</example>
		</section>

	</section>


</chapter>