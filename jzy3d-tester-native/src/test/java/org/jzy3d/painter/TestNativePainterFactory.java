package org.jzy3d.painter;

import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import javax.imageio.ImageIO;
import org.junit.Assert;
import org.junit.Test;
import org.jzy3d.chart.Chart;
import org.jzy3d.chart.factories.AWTChartFactory;
import org.jzy3d.chart.factories.AWTPainterFactory;
import org.jzy3d.chart.factories.IChartFactory;
import org.jzy3d.chart.factories.IPainterFactory;
import org.jzy3d.junit.ChartTester;
import org.jzy3d.junit.NativeChartTester;
import org.jzy3d.maths.Range;
import org.jzy3d.plot3d.builder.Mapper;
import org.jzy3d.plot3d.builder.SurfaceBuilder;
import org.jzy3d.plot3d.builder.concrete.OrthonormalGrid;
import org.jzy3d.plot3d.primitives.Shape;

public class TestNativePainterFactory {
  @Test
  public void whenOffscreenSizeDefined_ThenChartTesterProduceImageAtThisSize() throws IOException {

    // Given 
    IPainterFactory p = new AWTPainterFactory();
    int width = 800;
    int height = 600;
    
    // When
    IChartFactory factory = new AWTChartFactory(p);
    factory.getPainterFactory().setOffscreen(width, height); // UNDER TEST
    Chart chart = factory.newChart();
    chart.add(surface());
    
    // work in target dir as the reference image generated by chart tester
    // will be the thing under test
    String reference = "target/" + this.getClass().getSimpleName() + ".png";
    new File(reference).delete();

    ChartTester tester = new NativeChartTester();
    tester.assertSimilar(chart, reference); // UNDER TEST
    
    // Then
    BufferedImage i = ImageIO.read(new File(reference));
    Assert.assertEquals(width, i.getWidth());
    Assert.assertEquals(height, i.getHeight());
  }

  private static Shape surface() {
    Mapper mapper = new Mapper() {
      @Override
      public double f(double x, double y) {
        return x * Math.sin(x * y);
      }
    };
    Range range = new Range(-3, 3);
    int steps = 50;

    SurfaceBuilder builder = new SurfaceBuilder();
    Shape surface = builder.orthonormal(new OrthonormalGrid(range, steps), mapper);
    surface.setFaceDisplayed(true);
    return surface;
  }
}
